"""
  Capstone Project.  Code to run on a LAPTOP (NOT the robot).
  Displays the Graphical User Interface (GUI) and communicates with the robot.

  Authors:  Your professors (for the framework)
    and Kirk Preston.
  Winter term, 2018-2019.
"""

import mqtt_remote_method_calls as com
import tkinter
from tkinter import ttk
import shared_gui


def main():
    """
    This code, which must run on a LAPTOP:
      1. Constructs a GUI for my part of the Capstone Project.
      2. Communicates via MQTT with the code that runs on the EV3 robot.
    """
    # -------------------------------------------------------------------------
    # Construct and connect the MQTT Client:
    # -------------------------------------------------------------------------
    mqtt_sender = com.MqttClient()
    mqtt_sender.connect_to_ev3()

    # -------------------------------------------------------------------------
    # The root TK object for the GUI:
    # -------------------------------------------------------------------------
    root = tkinter.Tk()
    root.title('Robot Operation Console')


    # -------------------------------------------------------------------------
    # The main frame, upon which the other frames are placed.
    # -------------------------------------------------------------------------
    main_frame = ttk.Frame(root, padding=10, borderwidth=5, relief="groove")
    main_frame.grid()



    # -------------------------------------------------------------------------
    # Sub-frames for the shared GUI that the team developed:
    # -------------------------------------------------------------------------
    control_frame= get_shared_frames(main_frame,mqtt_sender)



    # -------------------------------------------------------------------------
    # Frames that are particular to my individual contributions to the project.
    # -------------------------------------------------------------------------
    # DONE: Implement and call get_my_frames(...)

    # -------------------------------------------------------------------------
    # Grid the frames.
    # -------------------------------------------------------------------------
    grid_frames(control_frame)


    # -------------------------------------------------------------------------
    # The event loop:
    # -------------------------------------------------------------------------
    root.mainloop()

    # return main_frame


def get_shared_frames(main_frame, mqtt_sender):
    control_frame = controller_frame(main_frame, mqtt_sender)


    return control_frame


def grid_frames(control_frame):
    control_frame.grid(row=0, column=0)

    #Local laptop GUI has been implemented

def controller_frame(window, mqtt_sender):
    frame = ttk.Frame(window, padding=10, borderwidth=5, relief='groove')
    frame.grid()

    frame_label = ttk.Label(frame, text='Robot Controller')
    speed_label = ttk.Label(frame, text='Drive Speed')
    color_threshold_label = ttk.Label(frame, text='Color Intensity')
    timer_countdown_label = ttk.Label(frame, text='Timer Countdown')

    speed_entry = ttk.Entry(frame, width=9)
    timer_countdown_entry = ttk.Entry(frame, width=9)
    color_threshold_entry = ttk.Entry(frame, width=9)

    set_parameters_button = ttk.Button(frame, text='Set')
    quit_game_button = ttk.Button(frame, text='Quit Game')
    reset_game_button = ttk.Button(frame, text='Reset Game')

    ####these buttons are for controlling the robot####

    #### Interprets the Keyboard ####
    frame.bind_all('<Key-w>', lambda event: forward(mqtt_sender, speed_entry))
    frame.bind_all('<Key-s>', lambda event: backward(mqtt_sender, speed_entry))
    frame.bind_all('<Key-a>', lambda event: left(mqtt_sender, speed_entry))
    frame.bind_all('<Key-d>', lambda event: right(mqtt_sender, speed_entry))
    frame.bind_all('<Key-space>', lambda event: stop(mqtt_sender))



    def forward(mqtt_sender, speedBox):
        print("go forward")
        speed = speedBox.get()
        mqtt_sender.send_message('forward',[speed])

    def backward(mqtt_sender, speedBox):
        print("go backward")
        speed = speedBox.get()
        mqtt_sender.send_message('backward', [speed])

    def left(mqtt_sender, speedBox):
        print("going left")
        speed = speedBox.get()
        mqtt_sender.send_message('left',[speed])

    def right(mqtt_sender, speedBox):
        print("going right")
        speed = speedBox.get()
        mqtt_sender.send_message('right',[speed])

    def stop(mqtt_sender):
        print('stopping...')
        mqtt_sender.send_message('stop')

    w_button = ttk.Button(frame, text='W Forward', width=11)
    a_button = ttk.Button(frame, text='A Left', width=9)
    s_button = ttk.Button(frame, text='S Backward', width=11)
    d_button = ttk.Button(frame, text='D Right', width=9)

    # Controller Button Placement
    w_button.grid(row=6, column=1)
    a_button.grid(row=7, column=0)
    s_button.grid(row=7, column=1)
    d_button.grid(row=7, column=2)

    # Grid Placement
    frame_label.grid(row=0, column=1)
    speed_label.grid(row=1, column=0)
    speed_entry.grid(row=2, column=0)
    set_parameters_button.grid(row=2, column=1)
    color_threshold_label.grid(row=3, column=0)
    color_threshold_entry.grid(row=4, column=0)
    timer_countdown_label.grid(row=2, column=2)
    timer_countdown_entry.grid(row=3, column=2)
    ### Possible Turn Speed Button
    ### Possible Turn Speed Button
    quit_game_button.grid(row=11, column=1)
    reset_game_button.grid(row=12, column=1)

    set_parameters_button["command"] = lambda: handle_m3_game_parameters(speed_entry, timer_countdown_entry, color_threshold_entry, mqtt_sender)
    quit_game_button["command"] = lambda: handle_quit(mqtt_sender)
    reset_game_button["command"] = lambda: handle_m3_game_reset(mqtt_sender) ###simply call the robot die function

    return frame

######## Handler Functions ##########

def handle_m3_game_reset(mqtt_sender):
    print('This game is being reset')
    mqtt_sender.send_message('m3_reset_game')

def handle_quit(mqtt_sender):
    print('Quitting Game')
    mqtt_sender.send_message('m3_robot_die')
    mqtt_sender.send_message('quit')

def handle_m3_greater_intensity(mqtt_sender, intensity_entry):
    print('This color has intensity')
    mqtt_sender.send_message('m3_greater_intensity', [intensity_entry.get()])

def handle_m3_smaller_intensity(mqtt_sender, intensity_entry):
    print('This color has intensity')
    mqtt_sender.send_message('m3_smaller_intensity', [intensity_entry.get()])

def handle_m3_color_true(mqtt_sender, color_entry):
    print('This is the color wanted')
    mqtt_sender.send_message('m3_color_true', [color_entry.get()])

def handle_m3_color_false(mqtt_sender, color_entry):
    print('This is not the color wanted')
    mqtt_sender.send_message('m3_color_false', [color_entry.get()])






# -----------------------------------------------------------------------------
# Calls  main  to start the ball rolling.
# -----------------------------------------------------------------------------
main()